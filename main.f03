SUBROUTINE fkdiag(kdiag,g,ndof,neq)
!
! This subroutine computes the skyline profile.
!
 IMPLICIT NONE
 INTEGER,PARAMETER::rik=selected_int_kind(12)
 INTEGER::idof,i,j,im,k,ndof,neq
 INTEGER,INTENT(IN)::g(ndof)
 INTEGER(rik)::iwp1
 INTEGER(rik),INTENT(OUT)::kdiag(neq)
 idof=SIZE(g)
 DO i=1,idof
   iwp1=1
   IF(g(i)/=0)THEN
     DO j=1,idof
       IF(g(j)/=0)THEN
         im=g(i)-g(j)+1
         IF(im>iwp1)iwp1=im
       END IF
     END DO
     k=g(i)
     IF(iwp1>kdiag(k))kdiag(k)=iwp1
   END IF
 END DO
RETURN
END SUBROUTINE fkdiag

SUBROUTINE fsparv(kv,km,g,kdiag,ndof,neq,ij)
!
! This subroutine assembles element matrices into a symmetric skyline
! global matrix.
!
 IMPLICIT NONE
 INTEGER::i,idof,k,j,iw,neq,ndof
 INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15),rik=selected_int_kind(12)
 INTEGER,INTENT(IN)::g(ndof)
 INTEGER(rik)::ival
 INTEGER(rik),INTENT(IN)::kdiag(neq),ij
 REAL(iwp),INTENT(IN)::km(ndof,ndof)
 REAL(iwp),INTENT(OUT)::kv(ij)
 
 idof=UBOUND(g,1)
 DO i=1,idof
   k=g(i)
   IF(k/=0)THEN
     DO j=1,idof
       IF(g(j)/=0)THEN
         iw=k-g(j)
         IF(iw>=0)THEN
           ival=kdiag(k)-iw
           kv(ival)=kv(ival)+km(i,j) 
         END IF
       END IF
     END DO
   END IF
 END DO
RETURN
END SUBROUTINE fsparv

SUBROUTINE linmul_sky(kv,disps,loads,kdiag,neq,ij)
!
! This subroutine forms the product of symmetric matrix stored as
! a skyline and a vector.
!
 IMPLICIT NONE
 INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15),rik=selected_int_kind(12)
 INTEGER(rik)::n,i,j,low,lup,k,ij,neq
 REAL(iwp),INTENT(IN)::kv(ij),disps(0:neq)
 REAL(iwp),INTENT(OUT)::loads(0:neq)
 INTEGER(rik),INTENT(IN)::kdiag(neq)
 REAL(iwp)::x,zero=0.0_iwp
 n=UBOUND(disps,1)
 DO i=1,n
   x=zero 
   lup=kdiag(i)
   IF(i==1)low=lup
   IF(i/=1)low=kdiag(i-1)+1
   DO j=low,lup
     x=x+kv(j)*disps(i+j-lup) 
   END DO
   loads(i)=x
   IF(i==1)CYCLE   
   lup=lup-1
   DO j=low,lup
     k=i+j-lup-1
     loads(k)=loads(k)+kv(j)*disps(i)        
   END DO
 END DO
RETURN
END SUBROUTINE linmul_sky  

SUBROUTINE mesh_ensi(argv,nlen,g_coord,g_num,element,x,nf,loads,          &
                     nstep,npri,dtim,solid,nod,nels,nodof,nn,ndim,neq)
! 
! This subroutine outputs a set of files in the Ensight gold format.
! Models in this format can be viewed in the visualisation tool ParaView.
!
! Element types supported:                Tested with:
!
! 2-node bar
! 3-node triangle                         p51  (4th edition p51_1.dat)
! 6-node triangle
! 4-node quadrilateral                    p115 (4th edition)
! 8-node quadrilateral                    p116 (4th edition)
! 4-node tetrahedron                      p54  (4th edition p54_2.dat)
! 8-node hexahedron                       p86  (4th edition)
! 20-node hexahedron                      p55  (4th edition)
! Fri 02 Dec 2016 14:30:03 SAST modified etype to x changed variable type

  IMPLICIT none
  INTEGER                       :: i,j,k,l,m,n,nfe,nod,nels,ndim,nn
  INTEGER                       :: prnwidth,remainder,neq,nodof
  INTEGER,PARAMETER             :: iwp=SELECTED_REAL_KIND(15)
  INTEGER,   INTENT(IN)         :: nlen,nstep,npri
  INTEGER,   INTENT(IN)         :: g_num(nod,nels),nf(nodof,nn)
  REAL(iwp), INTENT(IN)         :: g_coord(ndim,nn),loads(0:neq),dtim,x(*)
  CHARACTER(LEN=15), INTENT(IN) :: argv,element
  LOGICAL, INTENT(IN)           :: solid
!------------------------------------------------------------------------------
! 1. Initialisation
!------------------------------------------------------------------------------

  nn   = UBOUND(g_coord,2) ; ndim = UBOUND(g_coord,1)
  nels = UBOUND(g_num,2)   ; nod  = UBOUND(g_num,1)

!------------------------------------------------------------------------------
! 2. Write case file
!------------------------------------------------------------------------------

  OPEN(32,FILE=argv(1:nlen)//'.ensi.case')

  WRITE(32,'(A/A)')    "#", "# Post-processing file generated by subroutine &
                             &WRITE_ENSI in "
  WRITE(32,'(A/A/A)')  "#","# Ensight Gold Format","#"
  WRITE(32,'(2A/A)')   "# Problem name: ",argv(1:nlen),"#"
  WRITE(32,'(A/A/A)')  "FORMAT","type:  ensight gold","GEOMETRY"
  WRITE(32,'(2A/A)')   "model: 1  ",argv(1:nlen)//'.ensi.geo',"VARIABLE"
  WRITE(32,'(2A)')     "scalar per element:  material       ",                 &
                        argv(1:nlen)//'.ensi.matid-***'
  WRITE(32,'(2A)')     "vector per element:  materialangle  ",    &
                        argv(1:nlen)//'.ensi.matang-***'
  IF(solid) THEN
    WRITE(32,'(2A)')   "scalar per node:     restraint      ",                 &
                        argv(1:nlen)//'.ensi.ndbnd'
!     WRITE(32,'(2A)')   "vector per node:     displacement  ",                 &
!                         argv(1:nlen)//'.ensi.displ-*****'
  ELSE
    WRITE(32,'(2A)')   "scalar per node:     pressure       ",                 &
                        argv(1:nlen)//'.ensi.pressure-*****'
  END IF
  WRITE(32,'(2A)')     "vector per node:     load           ",                 &
                        argv(1:nlen)//'.ensi.ndlds'

!------------------------------------------------------------------------------
! 3. Write geometry file
!------------------------------------------------------------------------------

  OPEN(33,FILE=argv(1:nlen)//'.ensi.geo')
  WRITE(33,'(/2A)')   "Problem name: ", argv(1:nlen)
  WRITE(33,'(A/A/A)') "Geometry files","node id given","element id given"
  WRITE(33,'(A/A)')   "part","      1"
  IF(ndim==2) WRITE(33,'(A)') "2d-mesh"
  IF(ndim==3) WRITE(33,'(A)') "Volume Mesh"
  WRITE(33,'(A)')     "coordinates"

  WRITE(33,'(I10)') nn
  DO j=1,ndim
    DO i=1,nn
      WRITE(33,'(E12.5)') g_coord(j,i)
    END DO
  END DO

  IF(ndim==2) THEN ! ensight requires zeros for the z-ordinate
    DO i=1,nn
      WRITE(33,'(A)') " 0.00000E+00"
    END DO
  END IF

  SELECT CASE(element)
    CASE('triangle')
      SELECT CASE(nod)
        CASE(3)
          WRITE(33,'(A/I10)') "tria3", nels
          DO i = 1,nels
            WRITE(33,'(3I10)')g_num(3,i),g_num(2,i),g_num(1,i)
          END DO
        CASE DEFAULT
          WRITE(33,'(A)')   "# Element type not recognised"
      END SELECT
    CASE('quadrilateral')
      SELECT CASE(nod)
        CASE(4)
          WRITE(33,'(A/I10)') "quad4", nels
          DO i = 1,nels
            WRITE(33,'(4I10)')g_num(1,i),g_num(4,i),g_num(3,i),g_num(2,i)
          END DO
        CASE(8)
          WRITE(33,'(A/I10)') "quad8", nels
          DO i = 1,nels
            WRITE(33,'(8I10)')g_num(1,i),g_num(7,i),g_num(5,i),g_num(3,i),    &
                              g_num(8,i),g_num(6,i),g_num(4,i),g_num(2,i)
          END DO
        CASE DEFAULT
          WRITE(33,'(A)')   "# Element type not recognised"
      END SELECT
    CASE('hexahedron')
      SELECT CASE(nod)
        CASE(8)
          WRITE(33,'(A/I10)') "hexa8", nels
          DO i = 1,nels
            WRITE(33,'(8I10)') g_num(1,i),g_num(4,i),g_num(8,i),g_num(5,i),   &
                               g_num(2,i),g_num(3,i),g_num(7,i),g_num(6,i)
          END DO
        CASE(20)
          WRITE(33,'(A/I10)') "hexa20", nels
          DO i = 1,nels
            WRITE(33,'(20I10)')                                               &
              g_num(1,i), g_num(7,i), g_num(19,i),g_num(13,i),g_num(3,i),     &
              g_num(5,i), g_num(17,i),g_num(15,i),g_num(8,i), g_num(12,i),    &
              g_num(20,i),g_num(9,i), g_num(4,i), g_num(11,i),g_num(16,i),    &
              g_num(10,i),g_num(2,i), g_num(6,i), g_num(18,i),g_num(14,i)
          END DO
        CASE DEFAULT
          WRITE(33,'(A)')   "# Element type not recognised"
      END SELECT
    CASE('tetrahedron')
      SELECT CASE(nod)
        CASE(4)
          WRITE(33,'(A/I10)') "tetra4", nels
          DO i = 1,nels
            WRITE(33,'(4I10)') g_num(1,i),g_num(3,i),g_num(2,i),g_num(4,i)
          END DO
        CASE DEFAULT
          WRITE(33,'(A)')   "# Element type not recognised"
      END SELECT
    CASE DEFAULT
      WRITE(33,'(A)')       "# Element type not recognised"
  END SELECT

  CLOSE(33)

!------------------------------------------------------------------------------
! 5. Write boundary conditions. Encoded using formula: 4z + 2y + 1x
!
!    110 = 1   010 = 2   100 = 3   011 = 4   101 = 5   001 = 6   000 = 7
!------------------------------------------------------------------------------

  IF(solid) THEN
    OPEN(135,FILE=argv(1:nlen)//'.ensi.ndbnd')
    WRITE(135,'(A)')     "Alya Ensight Gold --- Scalar per-node variable file"
    WRITE(135,'(A/A/A)') "part", "      1","coordinates"
    IF(ndim==3) THEN
      DO i=1,UBOUND(g_coord,2)
        nfe=0
        IF(nf(1,i)==0) nfe=nfe+1
        IF(nf(2,i)==0) nfe=nfe+2
        IF(nf(3,i)==0) nfe=nfe+4
        WRITE(135,'(I2)') nfe
      END DO
    ELSE IF(ndim==2) THEN
      DO i=1,nn
        nfe=0
        IF(nf(1,i)==0) nfe=nfe+1
        IF(nf(2,i)==0) nfe=nfe+2
        WRITE(135,'(I2)') nfe
      END DO
    ELSE
      PRINT *, "Wrong number of dimensions in mesh_ensi"
    END IF
  END IF

  CLOSE(135)

!------------------------------------------------------------------------------
! 6. Write loaded nodes
!------------------------------------------------------------------------------

  OPEN(136,FILE=argv(1:nlen)//'.ensi.ndlds')
  WRITE(136,'(A)')     "Alya Ensight Gold --- Vector per-node variable file"
  WRITE(136,'(A/A/A)') "part", "      1","coordinates"
  DO j=1,UBOUND(nf,1)
    DO i=1, UBOUND(nf,2)
      WRITE(136,'(E12.5)')loads(nf(j,i))
    END DO
  END DO
  CLOSE(136)
END SUBROUTINE mesh_ensi

SUBROUTINE matid(x,nod,nels)
! 
! This subroutine outputs a set of files in the Ensight gold format.
! Models in this format can be viewed in the visualisation tool ParaView.
!
! Element types supported:                Tested with:
!
! 2-node bar
! 3-node triangle                         p51  (4th edition p51_1.dat)
! 6-node triangle
! 4-node quadrilateral                    p115 (4th edition)
! 8-node quadrilateral                    p116 (4th edition)
! 4-node tetrahedron                      p54  (4th edition p54_2.dat)
! 8-node hexahedron                       p86  (4th edition)
! 20-node hexahedron                      p55  (4th edition)
! Fri 02 Dec 2016 14:30:03 SAST modified etype to x changed variable type

  IMPLICIT none
  INTEGER                       :: i,nod,nels
  INTEGER,PARAMETER             :: iwp=SELECTED_REAL_KIND(15)
  REAL(iwp), INTENT(IN)         :: x(nels)
  REAL(iwp)                     :: y(nels)

!------------------------------------------------------------------------------
! 4. Write file containing material IDs
!------------------------------------------------------------------------------
  OPEN(34,FILE='TopOpt.ensi.matid')
  REWIND(34)
  WRITE(34,'(A)') "Alya Ensight Gold --- Scalar per-element variable file"
  WRITE(34,'(A/A)') "part", "      1"
  if (nod==4) then 
  WRITE(34,'(A)') "quad4"
  else 
  WRITE(34,'(A)') "quad8"
  endif
  DO i=1,nels;
  y(i) = x(i)/(2.d0*dacos(0.d0))*180
  do while (y(i) .GE. 180)
  y(i) = y(i) - 180
  enddo
  do while (y(i) .LE.-180)
  y(i) = y(i) + 180
  enddo
  WRITE(34,'(E10.2)') (y(i))
  END DO

  WRITE(34,'(A)')

  CLOSE(34)

  !------------------------------------------------------------------------------
! 7. Write Material Angle as a vector
!------------------------------------------------------------------------------

  OPEN(37,FILE='TopOpt.ensi.matang')
  WRITE(37,'(A)')     "Alya Ensight Gold --- Vector per-element variable file"
  WRITE(37,'(A/A/A)') "part", "      1"
    if (nod==4) then
  WRITE(37,'(A)') "quad4"
  else
  WRITE(37,'(A)') "quad8"
  endif
  DO i=1,nels;
    WRITE(37,'(E10.2)') (1.d0)
  enddo
  DO i=1,nels;
    WRITE(37,'(E10.2)') (dtan(x(i)))
  enddo
  WRITE(37,'(A)')
  CLOSE(37)
  RETURN
END SUBROUTINE matid

SUBROUTINE mesh(g_coord,g_num,argv,nlen,ips,nod,nels,ndim,nn)
! This subroutine produces a PostScript output file "*.msh" displaying
! the undeformed finite element mesh.
!
 IMPLICIT NONE
 INTEGER::i,ii,j,jj,nn,nod,nel,nels,ndim
 INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
 REAL(iwp),INTENT(IN)::g_coord(ndim,nn)
 INTEGER,INTENT(IN)::g_num(nod,nels),ips,nlen
 CHARACTER(*),INTENT(IN)::argv
 REAL(iwp)::xmin,xmax,ymin,ymax,width,height,scale=72,sxy,xo,yo,x,y,      &
   pt5=0.5_iwp,opt5=1.5_iwp,fpt5=5.5_iwp,d8=8.0_iwp,ept5=8.5_iwp,         &
   d11=11.0_iwp
 
 OPEN(ips,FILE=argv(1:nlen)//'.msh')
!
!                       compute size of mesh
!
 nn=UBOUND(g_coord,2)
 xmin=g_coord(1,1)
 xmax=g_coord(1,1)
 ymin=g_coord(2,1)
 ymax=g_coord(2,1)
 DO i=2,nn
   IF(g_coord(1,i)<xmin)xmin=g_coord(1,i)      
   IF(g_coord(1,i)>xmax)xmax=g_coord(1,i)      
   IF(g_coord(2,i)<ymin)ymin=g_coord(2,i)      
   IF(g_coord(2,i)>ymax)ymax=g_coord(2,i)      
 END DO
 width =xmax-xmin
 height=ymax-ymin
!
!                       allow 1.5" margin minimum on each side of figure
!
 IF(height.GE.d11/ept5*width)THEN
!
!                       height governs the scale
!
   sxy=scale*d8/height
   xo=scale*pt5*(ept5-d8*width/height)
   yo=scale*opt5
 ELSE
!
!                       width governs the scale
!
   sxy=scale*fpt5/width
   xo=scale*opt5
   yo=scale*pt5*(d11-fpt5*height/width)
 END IF
!
!                       start PostScript output
!
 WRITE(ips,'(a)')'%!PS-Adobe-1.0'
 WRITE(ips,'(a)')'%%DocumentFonts: none'
 WRITE(ips,'(a)')'%%Pages: 1'
 WRITE(ips,'(a)')'%%EndComments'
 WRITE(ips,'(a)')'/m {moveto} def'
 WRITE(ips,'(a)')'/l {lineto} def'
 WRITE(ips,'(a)')'/s {stroke} def'
 WRITE(ips,'(a)')'/c {closepath} def'
 WRITE(ips,'(a)')'%%EndProlog'
 WRITE(ips,'(a)')'%%Page: 0 1'
 WRITE(ips,'(a)')'gsave'
 WRITE(ips,'(2f9.2,a)') xo, yo, ' translate'
 WRITE(ips,'(f9.2,a)') 0.5, ' setlinewidth'
!
!                       draw the mesh
!
 nod=UBOUND(g_num,1)
 nel=UBOUND(g_num,2)
 IF(nod==5)nod=4
 IF(nod==9)nod=8
 IF(nod==10)nod=9
 IF(nod==15)nod=12
 DO i=1,nel
   ii=g_num(1,i)
   IF(ii==0)CYCLE
   x=sxy*(g_coord(1,ii)-xmin)
   y=sxy*(g_coord(2,ii)-ymin)
   WRITE(ips,'(2f9.2,a)')x,y,' m'
   DO j=2,nod
     jj=g_num(j,i)
     x=sxy*(g_coord(1,jj)-xmin)
     y=sxy*(g_coord(2,jj)-ymin)
     WRITE(ips,'(2f9.2,a)') x, y,' l'
   END DO
   WRITE(ips,'(a)')'c s'
 END DO
!
!                       close output file
!
 WRITE(ips,'(a)')'grestore'
 WRITE(ips,'(a)')'showpage'
 CLOSE(ips)
!
RETURN
END SUBROUTINE mesh

SUBROUTINE num_to_g(num,nf,g,ndof,nod,nodof,nn)
! This subroutine finds the g vector from num and nf.
!
 IMPLICIT NONE
 INTEGER::i,k,nod,nodof,ndof,nn 
 INTEGER,INTENT(IN)::num(nod),nf(nodof,nn) 
 INTEGER,INTENT(OUT)::g(ndof)
 
 nod=UBOUND(num,1) 
 nodof=UBOUND(nf,1)
DO i=1,nod
   k=i*nodof
   g(k-nodof+1:k)=nf(:,num(i))
 END DO
 RETURN
END SUBROUTINE num_to_g   

SUBROUTINE Q4_iso(km,E,NU)
! Program gives element stiffness matrix for an 4 node 
! quadrilateral isotropic element in plain stress
  implicit none
  INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
  REAL(iwp),INTENT(IN)::E,NU
  REAL(iwp)::t2,t3,t4,t5,t6,t7,t8,t9,t10                       
  REAL(iwp),INTENT(OUT)::km(8,8)
  
    t2 = (NU**2 - 1)
    t3 = E*(NU - 3)/t2
    t4 = -E/(8*NU - 8)
    t5 = -E*NU/t2/6
    t6 = E*(3*NU - 1)/t2
    t7 = E*(-NU + 3)/t2
    t8 = E/(NU - 1)
    t9 = E*(NU + 3)/t2
    t10= E*(-3*NU + 1)/t2

    km(1,1)=(1.0d0/6.0d0)*t3
    km(1,2)=t4
    km(1,3)=t5
    km(1,4)=(1.0d0/8.0d0)*t6
    km(1,5)=(1.0d0/12.0d0)*t7
    km(1,6)=(1.0d0/8.0d0)*t8
    km(1,7)=(1.0d0/12.0d0)*t9
    km(1,8)=(1.0d0/8.0d0)*t10
    km(2,1)=t4
    km(2,2)=(1.0d0/6.0d0)*t3
    km(2,3)=(1.0d0/8.0d0)*t10
    km(2,4)=(1.0d0/12.0d0)*t9
    km(2,5)=(1.0d0/8.0d0)*t8
    km(2,6)=-t3/12
    km(2,7)=(1.0d0/8.0d0)*t6
    km(2,8)=t5
    km(3,1)=t5
    km(3,2)=(1.0d0/8.0d0)*t10
    km(3,3)=(1.0d0/6.0d0)*t3
    km(3,4)=(1.0d0/8.0d0)*t8
    km(3,5)=(1.0d0/12.0d0)*t9
    km(3,6)=(1.0d0/8.0d0)*t6
    km(3,7)=(1.0d0/12.0d0)*t7
    km(3,8)=t4
    km(4,1)=(1.0d0/8.0d0)*t6
    km(4,2)=(1.0d0/12.0d0)*t9
    km(4,3)=(1.0d0/8.0d0)*t8
    km(4,4)=(1.0d0/6.0d0)*t3
    km(4,5)=(1.0d0/8.0d0)*t10
    km(4,6)=t5
    km(4,7)=t4
    km(4,8)=-t3/12
    km(5,1)=(1.0d0/12.0d0)*t7
    km(5,2)=(1.0d0/8.0d0)*t8
    km(5,3)=(1.0d0/12.0d0)*t9
    km(5,4)=(1.0d0/8.0d0)*t10
    km(5,5)=(1.0d0/6.0d0)*t3
    km(5,6)=t4
    km(5,7)=t5
    km(5,8)=(1.0d0/8.0d0)*t6
    km(6,1)=(1.0d0/8.0d0)*t8
    km(6,2)=-t3/12
    km(6,3)=(1.0d0/8.0d0)*t6
    km(6,4)=t5
    km(6,5)=t4
    km(6,6)=(1.0d0/6.0d0)*t3
    km(6,7)=(1.0d0/8.0d0)*t10
    km(6,8)=(1.0d0/12.0d0)*t9
    km(7,1)=(1.0d0/12.0d0)*t9
    km(7,2)=(1.0d0/8.0d0)*t6
    km(7,3)=(1.0d0/12.0d0)*t7
    km(7,4)=t4
    km(7,5)=t5
    km(7,6)=(1.0d0/8.0d0)*t10
    km(7,7)=(1.0d0/6.0d0)*t3
    km(7,8)=(1.0d0/8.0d0)*t8
    km(8,1)=(1.0d0/8.0d0)*t10
    km(8,2)=t5
    km(8,3)=t4
    km(8,4)=-t3/12
    km(8,5)=(1.0d0/8.0d0)*t6
    km(8,6)=(1.0d0/12.0d0)*t9
    km(8,7)=(1.0d0/8.0d0)*t8
    km(8,8)=(1.0d0/6.0d0)*t3
RETURN
END SUBROUTINE Q4_iso

SUBROUTINE Q4_ortho(km,t1)
! Program gives element stiffness matrix for an 4 node 
! quadrilateral orthotropic element in plain stress

  implicit none
  INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
  REAL(iwp),INTENT(IN)::t1!angle?
  REAL(iwp),INTENT(OUT)::km(8,8) 
  REAL(iwp)::t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16                       

! optimised variables
  t2 = 5105.0d0/518.0d0                 
  t3 = 7373.0d0/344.0d0                 
  t4 = 7373.0d0/258.0d0
  t5 = 7373.0d0/516.0d0
  t6 = 7373.0d0/1032.0d0
  t7 = 1225355.0d0/35604.0d0
  t8 = 742119.0d0/59984.0d0
  t9 = 64079.0d0/59984.0d0
  t10= 33538.0d0/8901.0d0
  t11= 1225355.0d0/71208.0d0
  t12= 1493659.0d0/71208.0d0
  t13= sin(2.0d0*t1)
  t14= sin(4.0d0*t1)
  t15= cos(2.0d0*t1)
  t16= cos(4.0d0*t1)

  km(1,1)=t3*t13+t2*t14+t4*t15+t7
  km(1,2)=t4*t13-t2*t16+t8
  km(1,3)=t5*t15+t2*t16+t10
  km(1,4)=-t6*t13+t2*t14+t9
  km(1,5)=-t3*t13-t2*t14-t5*t15-t11
  km(1,6)=-t5*t13+t2*t16-t8
  km(1,7)=-t4*t15-t2*t16-t12
  km(1,8)=-t6*t13-t2*t14-t9
  km(2,1)=t4*t13-t2*t16+t8
  km(2,2)=t3*t13-t2*t14-t4*t15+t7
  km(2,3)=-t6*t13+t2*t14-t9
  km(2,4)=t4*t15-t2*t16-t12
  km(2,5)=-t5*t13+t2*t16-t8
  km(2,6)=-t3*t13+t2*t14+t5*t15-t11
  km(2,7)=-t6*t13-t2*t14+t9
  km(2,8)=-t5*t15+t2*t16+t10
  km(3,1)=t5*t15+t2*t16+t10
  km(3,2)=-t6*t13+t2*t14-t9
  km(3,3)=-t3*t13-t2*t14+t4*t15+t7
  km(3,4)=t4*t13+t2*t16-t8
  km(3,5)=-t4*t15-t2*t16-t12
  km(3,6)=-t6*t13-t2*t14+t9
  km(3,7)=t3*t13+t2*t14-t5*t15-t11
  km(3,8)=-t5*t13-t2*t16+t8
  km(4,1)=-t6*t13+t2*t14+t9
  km(4,2)=t4*t15-t2*t16-t12
  km(4,3)=t4*t13+t2*t16-t8
  km(4,4)=-t3*t13+t2*t14-t4*t15+t7
  km(4,5)=-t6*t13-t2*t14-t9
  km(4,6)=-t5*t15+t2*t16+t10
  km(4,7)=-t5*t13-t2*t16+t8
  km(4,8)=t3*t13-t2*t14+t5*t15-t11
  km(5,1)=-t3*t13-t2*t14-t5*t15-t11
  km(5,2)=-t5*t13+t2*t16-t8
  km(5,3)=-t4*t15-t2*t16-t12
  km(5,4)=-t6*t13-t2*t14-t9
  km(5,5)=t3*t13+t2*t14+t4*t15+t7
  km(5,6)=t4*t13-t2*t16+t8
  km(5,7)=t5*t15+t2*t16+t10
  km(5,8)=-t6*t13+t2*t14+t9
  km(6,1)=-t5*t13+t2*t16-t8
  km(6,2)=-t3*t13+t2*t14+t5*t15-t11
  km(6,3)=-t6*t13-t2*t14+t9
  km(6,4)=-t5*t15+t2*t16+t10
  km(6,5)=t4*t13-t2*t16+t8
  km(6,6)=t3*t13-t2*t14-t4*t15+t7
  km(6,7)=-t6*t13+t2*t14-t9
  km(6,8)=t4*t15-t2*t16-t12
  km(7,1)=-t4*t15-t2*t16-t12
  km(7,2)=-t6*t13-t2*t14+t9
  km(7,3)=t3*t13+t2*t14-t5*t15-t11
  km(7,4)=-t5*t13-t2*t16+t8
  km(7,5)=t5*t15+t2*t16+t10
  km(7,6)=-t6*t13+t2*t14-t9
  km(7,7)=-t3*t13-t2*t14+t4*t15+t7
  km(7,8)=t4*t13+t2*t16-t8
  km(8,1)=-t6*t13-t2*t14-t9
  km(8,2)=-t5*t15+t2*t16+t10
  km(8,3)=-t5*t13-t2*t16+t8
  km(8,4)=t3*t13-t2*t14+t5*t15-t11
  km(8,5)=-t6*t13+t2*t14+t9
  km(8,6)=t4*t15-t2*t16-t12
  km(8,7)=t4*t13+t2*t16-t8
  km(8,8)=-t3*t13+t2*t14-t4*t15+t7
RETURN
END SUBROUTINE Q4_ortho

SUBROUTINE Q4_ortho2(km,t1,t17)
! Program gives element stiffness matrix for an 4 node
! quadrilateral orthotropic element in plain stress

  implicit none
  INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
  REAL(iwp),INTENT(IN)::t1,t17!angle
  REAL(iwp),INTENT(OUT)::km(8,8)
  REAL(iwp)::t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16

! optimised variables
  t2 = 5105.0d0/518.0d0
  t3 = 7373.0d0/344.0d0
  t4 = 7373.0d0/258.0d0
  t5 = 7373.0d0/516.0d0
  t6 = 7373.0d0/1032.0d0
  t7 = 1225355.0d0/35604.0d0
  t8 = 742119.0d0/59984.0d0
  t9 = 64079.0d0/59984.0d0
  t10= 33538.0d0/8901.0d0
  t11= 1225355.0d0/71208.0d0
  t12= 1493659.0d0/71208.0d0
  t13= sin(2.0d0*t1)+sin(2.0d0*t17)
  t14= sin(4.0d0*t1)+sin(4.0d0*t17)
  t15= cos(2.0d0*t1)+cos(2.0d0*t17)
  t16= cos(4.0d0*t1)+cos(4.0d0*t17)

  km(1,1)=t3*t13+t2*t14+t4*t15+t7
  km(1,2)=t4*t13-t2*t16+t8
  km(1,3)=t5*t15+t2*t16+t10
  km(1,4)=-t6*t13+t2*t14+t9
  km(1,5)=-t3*t13-t2*t14-t5*t15-t11
  km(1,6)=-t5*t13+t2*t16-t8
  km(1,7)=-t4*t15-t2*t16-t12
  km(1,8)=-t6*t13-t2*t14-t9
  km(2,1)=t4*t13-t2*t16+t8
  km(2,2)=t3*t13-t2*t14-t4*t15+t7
  km(2,3)=-t6*t13+t2*t14-t9
  km(2,4)=t4*t15-t2*t16-t12
  km(2,5)=-t5*t13+t2*t16-t8
  km(2,6)=-t3*t13+t2*t14+t5*t15-t11
  km(2,7)=-t6*t13-t2*t14+t9
  km(2,8)=-t5*t15+t2*t16+t10
  km(3,1)=t5*t15+t2*t16+t10
  km(3,2)=-t6*t13+t2*t14-t9
  km(3,3)=-t3*t13-t2*t14+t4*t15+t7
  km(3,4)=t4*t13+t2*t16-t8
  km(3,5)=-t4*t15-t2*t16-t12
  km(3,6)=-t6*t13-t2*t14+t9
  km(3,7)=t3*t13+t2*t14-t5*t15-t11
  km(3,8)=-t5*t13-t2*t16+t8
  km(4,1)=-t6*t13+t2*t14+t9
  km(4,2)=t4*t15-t2*t16-t12
  km(4,3)=t4*t13+t2*t16-t8
  km(4,4)=-t3*t13+t2*t14-t4*t15+t7
  km(4,5)=-t6*t13-t2*t14-t9
  km(4,6)=-t5*t15+t2*t16+t10
  km(4,7)=-t5*t13-t2*t16+t8
  km(4,8)=t3*t13-t2*t14+t5*t15-t11
  km(5,1)=-t3*t13-t2*t14-t5*t15-t11
  km(5,2)=-t5*t13+t2*t16-t8
  km(5,3)=-t4*t15-t2*t16-t12
  km(5,4)=-t6*t13-t2*t14-t9
  km(5,5)=t3*t13+t2*t14+t4*t15+t7
  km(5,6)=t4*t13-t2*t16+t8
  km(5,7)=t5*t15+t2*t16+t10
  km(5,8)=-t6*t13+t2*t14+t9
  km(6,1)=-t5*t13+t2*t16-t8
  km(6,2)=-t3*t13+t2*t14+t5*t15-t11
  km(6,3)=-t6*t13-t2*t14+t9
  km(6,4)=-t5*t15+t2*t16+t10
  km(6,5)=t4*t13-t2*t16+t8
  km(6,6)=t3*t13-t2*t14-t4*t15+t7
  km(6,7)=-t6*t13+t2*t14-t9
  km(6,8)=t4*t15-t2*t16-t12
  km(7,1)=-t4*t15-t2*t16-t12
  km(7,2)=-t6*t13-t2*t14+t9
  km(7,3)=t3*t13+t2*t14-t5*t15-t11
  km(7,4)=-t5*t13-t2*t16+t8
  km(7,5)=t5*t15+t2*t16+t10
  km(7,6)=-t6*t13+t2*t14-t9
  km(7,7)=-t3*t13-t2*t14+t4*t15+t7
  km(7,8)=t4*t13+t2*t16-t8
  km(8,1)=-t6*t13-t2*t14-t9
  km(8,2)=-t5*t15+t2*t16+t10
  km(8,3)=-t5*t13-t2*t16+t8
  km(8,4)=t3*t13-t2*t14+t5*t15-t11
  km(8,5)=-t6*t13+t2*t14+t9
  km(8,6)=t4*t15-t2*t16-t12
  km(8,7)=t4*t13+t2*t16-t8
  km(8,8)=-t3*t13+t2*t14-t4*t15+t7
RETURN
END SUBROUTINE Q4_ortho2

SUBROUTINE Q4_ortho_n(km,xl,layerv)
! Program gives element stiffness matrix for an 4 node
! quadrilateral orthotropic element in plain stress

  implicit none
  INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
  INTEGER::i
  REAL(iwp),INTENT(IN)::xl(layerv)!angle
  INTEGER,INTENT(IN)::layerv
  REAL(iwp),INTENT(OUT)::km(8,8)
  REAL(iwp)::t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16

! optimised variables
  t2 = 5105.0d0/518.0d0/layerv
  t3 = 7373.0d0/344.0d0/layerv
  t4 = 7373.0d0/258.0d0/layerv
  t5 = 7373.0d0/516.0d0/layerv
  t6 = 7373.0d0/1032.0d0/layerv
  t7 = 1225355.0d0/35604.0d0
  t8 = 742119.0d0/59984.0d0
  t9 = 64079.0d0/59984.0d0
  t10= 33538.0d0/8901.0d0
  t11= 1225355.0d0/71208.0d0
  t12= 1493659.0d0/71208.0d0
  t13= 0.d0
  t14= 0.d0
  t15= 0.d0
  t16= 0.d0
  do i=1,layerv
    t13= sin(2.0d0*xl(i))+t13
    t14= sin(4.0d0*xl(i))+t14
    t15= cos(2.0d0*xl(i))+t15
    t16= cos(4.0d0*xl(i))+t16
  enddo
  km(1,1)=t3*t13+t2*t14+t4*t15+t7
  km(1,2)=t4*t13-t2*t16+t8
  km(1,3)=t5*t15+t2*t16+t10
  km(1,4)=-t6*t13+t2*t14+t9
  km(1,5)=-t3*t13-t2*t14-t5*t15-t11
  km(1,6)=-t5*t13+t2*t16-t8
  km(1,7)=-t4*t15-t2*t16-t12
  km(1,8)=-t6*t13-t2*t14-t9
  km(2,1)=t4*t13-t2*t16+t8
  km(2,2)=t3*t13-t2*t14-t4*t15+t7
  km(2,3)=-t6*t13+t2*t14-t9
  km(2,4)=t4*t15-t2*t16-t12
  km(2,5)=-t5*t13+t2*t16-t8
  km(2,6)=-t3*t13+t2*t14+t5*t15-t11
  km(2,7)=-t6*t13-t2*t14+t9
  km(2,8)=-t5*t15+t2*t16+t10
  km(3,1)=t5*t15+t2*t16+t10
  km(3,2)=-t6*t13+t2*t14-t9
  km(3,3)=-t3*t13-t2*t14+t4*t15+t7
  km(3,4)=t4*t13+t2*t16-t8
  km(3,5)=-t4*t15-t2*t16-t12
  km(3,6)=-t6*t13-t2*t14+t9
  km(3,7)=t3*t13+t2*t14-t5*t15-t11
  km(3,8)=-t5*t13-t2*t16+t8
  km(4,1)=-t6*t13+t2*t14+t9
  km(4,2)=t4*t15-t2*t16-t12
  km(4,3)=t4*t13+t2*t16-t8
  km(4,4)=-t3*t13+t2*t14-t4*t15+t7
  km(4,5)=-t6*t13-t2*t14-t9
  km(4,6)=-t5*t15+t2*t16+t10
  km(4,7)=-t5*t13-t2*t16+t8
  km(4,8)=t3*t13-t2*t14+t5*t15-t11
  km(5,1)=-t3*t13-t2*t14-t5*t15-t11
  km(5,2)=-t5*t13+t2*t16-t8
  km(5,3)=-t4*t15-t2*t16-t12
  km(5,4)=-t6*t13-t2*t14-t9
  km(5,5)=t3*t13+t2*t14+t4*t15+t7
  km(5,6)=t4*t13-t2*t16+t8
  km(5,7)=t5*t15+t2*t16+t10
  km(5,8)=-t6*t13+t2*t14+t9
  km(6,1)=-t5*t13+t2*t16-t8
  km(6,2)=-t3*t13+t2*t14+t5*t15-t11
  km(6,3)=-t6*t13-t2*t14+t9
  km(6,4)=-t5*t15+t2*t16+t10
  km(6,5)=t4*t13-t2*t16+t8
  km(6,6)=t3*t13-t2*t14-t4*t15+t7
  km(6,7)=-t6*t13+t2*t14-t9
  km(6,8)=t4*t15-t2*t16-t12
  km(7,1)=-t4*t15-t2*t16-t12
  km(7,2)=-t6*t13-t2*t14+t9
  km(7,3)=t3*t13+t2*t14-t5*t15-t11
  km(7,4)=-t5*t13-t2*t16+t8
  km(7,5)=t5*t15+t2*t16+t10
  km(7,6)=-t6*t13+t2*t14-t9
  km(7,7)=-t3*t13-t2*t14+t4*t15+t7
  km(7,8)=t4*t13+t2*t16-t8
  km(8,1)=-t6*t13-t2*t14-t9
  km(8,2)=-t5*t15+t2*t16+t10
  km(8,3)=-t5*t13-t2*t16+t8
  km(8,4)=t3*t13-t2*t14+t5*t15-t11
  km(8,5)=-t6*t13+t2*t14+t9
  km(8,6)=t4*t15-t2*t16-t12
  km(8,7)=t4*t13+t2*t16-t8
  km(8,8)=-t3*t13+t2*t14-t4*t15+t7
RETURN
END SUBROUTINE Q4_ortho_n

SUBROUTINE Q4_ortho_d(km,t1)

! Program gives element stiffness matrix derivative for a 4 node
! quadrilateral orthotropic element in plain stress

  implicit none
  INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
  REAL(iwp),INTENT(IN)::t1 !angle
  REAL(iwp),INTENT(OUT)::km(8,8)
  REAL(iwp)::t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16

! optimised variables
  t2 = 5105.0d0/518.0d0
  t3 = 7373.0d0/344.0d0
  t4 = 7373.0d0/258.0d0
  t5 = 7373.0d0/516.0d0
  t6 = 7373.0d0/1032.0d0
  t7 = 1225355.0d0/35604.0d0
  t8 = 742119.0d0/59984.0d0
  t9 = 64079.0d0/59984.0d0
  t10= 33538.0d0/8901.0d0
  t11= 1225355.0d0/71208.0d0
  t12= 1493659.0d0/71208.0d0
  t13= 2.0d0*cos(2.0d0*t1)
  t14= 4.0d0*cos(4.0d0*t1)
  t15= -2.0d0*sin(2.0d0*t1)
  t16= -4.0d0*sin(4.0d0*t1)

  km(1,1)=t3*t13+t2*t14+t4*t15
  km(1,2)=t4*t13-t2*t16
  km(1,3)=t5*t15+t2*t16
  km(1,4)=-t6*t13+t2*t14
  km(1,5)=-t3*t13-t2*t14-t5*t15
  km(1,6)=-t5*t13+t2*t16
  km(1,7)=-t4*t15-t2*t16
  km(1,8)=-t6*t13-t2*t14
  km(2,1)=t4*t13-t2*t16
  km(2,2)=t3*t13-t2*t14-t4*t15
  km(2,3)=-t6*t13+t2*t14
  km(2,4)=t4*t15-t2*t16
  km(2,5)=-t5*t13+t2*t16
  km(2,6)=-t3*t13+t2*t14+t5*t15
  km(2,7)=-t6*t13-t2*t14
  km(2,8)=-t5*t15+t2*t16
  km(3,1)=t5*t15+t2*t16
  km(3,2)=-t6*t13+t2*t14
  km(3,3)=-t3*t13-t2*t14+t4*t15
  km(3,4)=t4*t13+t2*t16
  km(3,5)=-t4*t15-t2*t16
  km(3,6)=-t6*t13-t2*t14
  km(3,7)=t3*t13+t2*t14-t5*t15
  km(3,8)=-t5*t13-t2*t16
  km(4,1)=-t6*t13+t2*t14
  km(4,2)=t4*t15-t2*t16
  km(4,3)=t4*t13+t2*t16
  km(4,4)=-t3*t13+t2*t14-t4*t15
  km(4,5)=-t6*t13-t2*t14
  km(4,6)=-t5*t15+t2*t16
  km(4,7)=-t5*t13-t2*t16
  km(4,8)=t3*t13-t2*t14+t5*t15
  km(5,1)=-t3*t13-t2*t14-t5*t15
  km(5,2)=-t5*t13+t2*t16
  km(5,3)=-t4*t15-t2*t16
  km(5,4)=-t6*t13-t2*t14
  km(5,5)=t3*t13+t2*t14+t4*t15
  km(5,6)=t4*t13-t2*t16
  km(5,7)=t5*t15+t2*t16
  km(5,8)=-t6*t13+t2*t14
  km(6,1)=-t5*t13+t2*t16
  km(6,2)=-t3*t13+t2*t14+t5*t15
  km(6,3)=-t6*t13-t2*t14
  km(6,4)=-t5*t15+t2*t16
  km(6,5)=t4*t13-t2*t16
  km(6,6)=t3*t13-t2*t14-t4*t15
  km(6,7)=-t6*t13+t2*t14
  km(6,8)=t4*t15-t2*t16
  km(7,1)=-t4*t15-t2*t16
  km(7,2)=-t6*t13-t2*t14
  km(7,3)=t3*t13+t2*t14-t5*t15
  km(7,4)=-t5*t13-t2*t16
  km(7,5)=t5*t15+t2*t16
  km(7,6)=-t6*t13+t2*t14
  km(7,7)=-t3*t13-t2*t14+t4*t15
  km(7,8)=t4*t13+t2*t16
  km(8,1)=-t6*t13-t2*t14
  km(8,2)=-t5*t15+t2*t16
  km(8,3)=-t5*t13-t2*t16
  km(8,4)=t3*t13-t2*t14+t5*t15
  km(8,5)=-t6*t13+t2*t14
  km(8,6)=t4*t15-t2*t16
  km(8,7)=t4*t13+t2*t16
  km(8,8)=-t3*t13+t2*t14-t4*t15
RETURN
end SUBROUTINE Q4_ortho_d

SUBROUTINE Q4_ortho_nd(km,t1,layerv)

! Program gives element stiffness matrix derivative for a 4 node
! quadrilateral orthotropic element in plain stress

  implicit none
  INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
  INTEGER,INTENT(IN)::layerv
  REAL(iwp),INTENT(IN)::t1 !angle
  REAL(iwp),INTENT(OUT)::km(8,8)
  REAL(iwp)::t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16

! optimised variables
  t2 = 5105.0d0/518.0d0/layerv
  t3 = 7373.0d0/344.0d0/layerv
  t4 = 7373.0d0/258.0d0/layerv
  t5 = 7373.0d0/516.0d0/layerv
  t6 = 7373.0d0/1032.0d0/layerv
  t7 = 1225355.0d0/35604.0d0
  t8 = 742119.0d0/59984.0d0
  t9 = 64079.0d0/59984.0d0
  t10= 33538.0d0/8901.0d0
  t11= 1225355.0d0/71208.0d0
  t12= 1493659.0d0/71208.0d0
  t13= 2.0d0*cos(2.0d0*t1)
  t14= 4.0d0*cos(4.0d0*t1)
  t15= -2.0d0*sin(2.0d0*t1)
  t16= -4.0d0*sin(4.0d0*t1)

  km(1,1)=t3*t13+t2*t14+t4*t15
  km(1,2)=t4*t13-t2*t16
  km(1,3)=t5*t15+t2*t16
  km(1,4)=-t6*t13+t2*t14
  km(1,5)=-t3*t13-t2*t14-t5*t15
  km(1,6)=-t5*t13+t2*t16
  km(1,7)=-t4*t15-t2*t16
  km(1,8)=-t6*t13-t2*t14
  km(2,1)=t4*t13-t2*t16
  km(2,2)=t3*t13-t2*t14-t4*t15
  km(2,3)=-t6*t13+t2*t14
  km(2,4)=t4*t15-t2*t16
  km(2,5)=-t5*t13+t2*t16
  km(2,6)=-t3*t13+t2*t14+t5*t15
  km(2,7)=-t6*t13-t2*t14
  km(2,8)=-t5*t15+t2*t16
  km(3,1)=t5*t15+t2*t16
  km(3,2)=-t6*t13+t2*t14
  km(3,3)=-t3*t13-t2*t14+t4*t15
  km(3,4)=t4*t13+t2*t16
  km(3,5)=-t4*t15-t2*t16
  km(3,6)=-t6*t13-t2*t14
  km(3,7)=t3*t13+t2*t14-t5*t15
  km(3,8)=-t5*t13-t2*t16
  km(4,1)=-t6*t13+t2*t14
  km(4,2)=t4*t15-t2*t16
  km(4,3)=t4*t13+t2*t16
  km(4,4)=-t3*t13+t2*t14-t4*t15
  km(4,5)=-t6*t13-t2*t14
  km(4,6)=-t5*t15+t2*t16
  km(4,7)=-t5*t13-t2*t16
  km(4,8)=t3*t13-t2*t14+t5*t15
  km(5,1)=-t3*t13-t2*t14-t5*t15
  km(5,2)=-t5*t13+t2*t16
  km(5,3)=-t4*t15-t2*t16
  km(5,4)=-t6*t13-t2*t14
  km(5,5)=t3*t13+t2*t14+t4*t15
  km(5,6)=t4*t13-t2*t16
  km(5,7)=t5*t15+t2*t16
  km(5,8)=-t6*t13+t2*t14
  km(6,1)=-t5*t13+t2*t16
  km(6,2)=-t3*t13+t2*t14+t5*t15
  km(6,3)=-t6*t13-t2*t14
  km(6,4)=-t5*t15+t2*t16
  km(6,5)=t4*t13-t2*t16
  km(6,6)=t3*t13-t2*t14-t4*t15
  km(6,7)=-t6*t13+t2*t14
  km(6,8)=t4*t15-t2*t16
  km(7,1)=-t4*t15-t2*t16
  km(7,2)=-t6*t13-t2*t14
  km(7,3)=t3*t13+t2*t14-t5*t15
  km(7,4)=-t5*t13-t2*t16
  km(7,5)=t5*t15+t2*t16
  km(7,6)=-t6*t13+t2*t14
  km(7,7)=-t3*t13-t2*t14+t4*t15
  km(7,8)=t4*t13+t2*t16
  km(8,1)=-t6*t13-t2*t14
  km(8,2)=-t5*t15+t2*t16
  km(8,3)=-t5*t13-t2*t16
  km(8,4)=t3*t13-t2*t14+t5*t15
  km(8,5)=-t6*t13+t2*t14
  km(8,6)=t4*t15-t2*t16
  km(8,7)=t4*t13+t2*t16
  km(8,8)=-t3*t13+t2*t14-t4*t15
RETURN
end SUBROUTINE Q4_ortho_nd

SUBROUTINE Q4_ortho_dd(km,t1)

! Program gives element stiffness matrix derivative for a 4 node
! quadrilateral orthotropic element in plain stress

  implicit none
  INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
  REAL(iwp),INTENT(IN)::t1 !angle?
  REAL(iwp),INTENT(OUT)::km(8,8)
  REAL(iwp)::t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16

! optimised variables
  t2 = 5105.0d0/518.0d0
  t3 = 7373.0d0/344.0d0
  t4 = 7373.0d0/258.0d0
  t5 = 7373.0d0/516.0d0
  t6 = 7373.0d0/1032.0d0
  t7 = 1225355.0d0/35604.0d0
  t8 = 742119.0d0/59984.0d0
  t9 = 64079.0d0/59984.0d0
  t10= 33538.0d0/8901.0d0
  t11= 1225355.0d0/71208.0d0
  t12= 1493659.0d0/71208.0d0
  t13= -4.0d0*sin(2.0d0*t1)
  t14= -16.0d0*sin(4.0d0*t1)
  t15= -4.0d0*cos(2.0d0*t1)
  t16= -16.0d0*cos(4.0d0*t1)

  km(1,1)=t3*t13+t2*t14+t4*t15
  km(1,2)=t4*t13-t2*t16
  km(1,3)=t5*t15+t2*t16
  km(1,4)=-t6*t13+t2*t14
  km(1,5)=-t3*t13-t2*t14-t5*t15
  km(1,6)=-t5*t13+t2*t16
  km(1,7)=-t4*t15-t2*t16
  km(1,8)=-t6*t13-t2*t14
  km(2,1)=t4*t13-t2*t16
  km(2,2)=t3*t13-t2*t14-t4*t15
  km(2,3)=-t6*t13+t2*t14
  km(2,4)=t4*t15-t2*t16
  km(2,5)=-t5*t13+t2*t16
  km(2,6)=-t3*t13+t2*t14+t5*t15
  km(2,7)=-t6*t13-t2*t14
  km(2,8)=-t5*t15+t2*t16
  km(3,1)=t5*t15+t2*t16
  km(3,2)=-t6*t13+t2*t14
  km(3,3)=-t3*t13-t2*t14+t4*t15
  km(3,4)=t4*t13+t2*t16
  km(3,5)=-t4*t15-t2*t16
  km(3,6)=-t6*t13-t2*t14
  km(3,7)=t3*t13+t2*t14-t5*t15
  km(3,8)=-t5*t13-t2*t16
  km(4,1)=-t6*t13+t2*t14
  km(4,2)=t4*t15-t2*t16
  km(4,3)=t4*t13+t2*t16
  km(4,4)=-t3*t13+t2*t14-t4*t15
  km(4,5)=-t6*t13-t2*t14
  km(4,6)=-t5*t15+t2*t16
  km(4,7)=-t5*t13-t2*t16
  km(4,8)=t3*t13-t2*t14+t5*t15
  km(5,1)=-t3*t13-t2*t14-t5*t15
  km(5,2)=-t5*t13+t2*t16
  km(5,3)=-t4*t15-t2*t16
  km(5,4)=-t6*t13-t2*t14
  km(5,5)=t3*t13+t2*t14+t4*t15
  km(5,6)=t4*t13-t2*t16
  km(5,7)=t5*t15+t2*t16
  km(5,8)=-t6*t13+t2*t14
  km(6,1)=-t5*t13+t2*t16
  km(6,2)=-t3*t13+t2*t14+t5*t15
  km(6,3)=-t6*t13-t2*t14
  km(6,4)=-t5*t15+t2*t16
  km(6,5)=t4*t13-t2*t16
  km(6,6)=t3*t13-t2*t14-t4*t15
  km(6,7)=-t6*t13+t2*t14
  km(6,8)=t4*t15-t2*t16
  km(7,1)=-t4*t15-t2*t16
  km(7,2)=-t6*t13-t2*t14
  km(7,3)=t3*t13+t2*t14-t5*t15
  km(7,4)=-t5*t13-t2*t16
  km(7,5)=t5*t15+t2*t16
  km(7,6)=-t6*t13+t2*t14
  km(7,7)=-t3*t13-t2*t14+t4*t15
  km(7,8)=t4*t13+t2*t16
  km(8,1)=-t6*t13-t2*t14
  km(8,2)=-t5*t15+t2*t16
  km(8,3)=-t5*t13-t2*t16
  km(8,4)=t3*t13-t2*t14+t5*t15
  km(8,5)=-t6*t13+t2*t14
  km(8,6)=t4*t15-t2*t16
  km(8,7)=t4*t13+t2*t16
  km(8,8)=-t3*t13+t2*t14-t4*t15
RETURN
end SUBROUTINE Q4_ortho_dd

SUBROUTINE Q8_iso(km,E,NU)

! Program gives element stiffness matrix for an 8 node 
! quadrilateral isotropic element in plain stress

  implicit none
  INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
  REAL(iwp),INTENT(IN)::E,NU
  REAL(iwp),INTENT(OUT)::km(16,16) 
  REAL(iwp) :: t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15

    t2 = E*(NU-3)
    t3 = (NU**2-1)
    t4 = (NU-1)
    t5 = 72*t4
    t6 = 45*NU**2-45
    t7 = -E*(20*NU-17)/t6
    t8 = E*(11*NU-1)
    t9 = E*(14*NU-31)/t3
    t10= E*(-3*NU + 1)
    t11= -E*(3*NU-43)/(90*NU**2-90)
    t12= E*(17*NU-73)/t3
    t13= E*(3*NU-1)/t3
    t14= E*(3*NU + 77)/t3
    t15= (18*NU**2-18)
  
    km(1,1)=(13.0d0/45.0d0)*t2/t3
    km(1,2)=-17*E/(t5)
    km(1,3)=t7
    km(1,4)=(1.0d0/18.0d0)*t8/t3
    km(1,5)=(1.0d0/90.0d0)*t9
    km(1,6)=(1.0d0/24.0d0)*t10/t3
    km(1,7)=t11
    km(1,8)=(1.0d0/18.0d0)*E/t4
    km(1,9)=(23.0d0/180.0d0)*t2/t3
    km(1,10)=-7*E/(t5)
    km(1,11)=-E*(10*NU-13)/t6
    km(1,12)=(1.0d0/18.0d0)*E/t4
    km(1,13)=(1.0d0/180.0d0)*t12
    km(1,14)=(1.0d0/24.0d0)*t13
    km(1,15)=(1.0d0/90.0d0)*t14
    km(1,16)=(1.0d0/18.0d0)*E*(-7*NU + 5)/t3
    km(2,1)=-17*E/(t5)
    km(2,2)=(13.0d0/45.0d0)*t2/t3
    km(2,3)=-E*(7*NU-5)/t15
    km(2,4)=(1.0d0/90.0d0)*t14
    km(2,5)=(1.0d0/24.0d0)*t13
    km(2,6)=(1.0d0/180.0d0)*t12
    km(2,7)=(1.0d0/18.0d0)*E/t4
    km(2,8)=(1.0d0/45.0d0)*E*(-10*NU + 13)/t3
    km(2,9)=-7*E/(t5)
    km(2,10)=(23.0d0/180.0d0)*t2/t3
    km(2,11)=(1.0d0/18.0d0)*E/t4
    km(2,12)=(1.0d0/90.0d0)*E*(-3*NU + 43)/t3
    km(2,13)=(1.0d0/24.0d0)*t10/t3
    km(2,14)=(1.0d0/90.0d0)*t9
    km(2,15)=(1.0d0/18.0d0)*t8/t3
    km(2,16)=(1.0d0/45.0d0)*E*(-20*NU + 17)/t3
    km(3,1)=t7
    km(3,2)=-E*(7*NU-5)/t15
    km(3,3)=(8.0d0/45.0d0)*E*(5*NU-8)/t3
    km(3,4)=0.0d0
    km(3,5)=t7
    km(3,6)=(1.0d0/18.0d0)*E*(7*NU-5)/t3
    km(3,7)=0.0d0
    km(3,8)=(2.0d0/9.0d0)*E/t4
    km(3,9)=-E*(10*NU-13)/t6
    km(3,10)=(1.0d0/18.0d0)*E/t4
    km(3,11)=(4.0d0/45.0d0)*E*(5*NU + 1)/t3
    km(3,12)=0.0d0
    km(3,13)=-E*(10*NU-13)/t6
    km(3,14)=-E/(18*NU-18)
    km(3,15)=0.0d0
    km(3,16)=-2*E/(9*NU-9)
    km(4,1)=(1.0d0/18.0d0)*t8/t3
    km(4,2)=(1.0d0/90.0d0)*t14
    km(4,3)=0.0d0
    km(4,4)=(4.0d0/45.0d0)*E*(3*NU-23)/t3
    km(4,5)=(1.0d0/18.0d0)*E*(-11*NU + 1)/t3
    km(4,6)=(1.0d0/90.0d0)*t14
    km(4,7)=(2.0d0/9.0d0)*E/t4
    km(4,8)=0.0d0
    km(4,9)=(1.0d0/18.0d0)*E/t4
    km(4,10)=(1.0d0/90.0d0)*E*(-3*NU + 43)/t3
    km(4,11)=0.0d0
    km(4,12)=-4*E*(3*NU + 7)/t6
    km(4,13)=-E/(18*NU-18)
    km(4,14)=(1.0d0/90.0d0)*E*(-3*NU + 43)/t3
    km(4,15)=-2*E/(9*NU-9)
    km(4,16)=0.0d0
    km(5,1)=(1.0d0/90.0d0)*t9
    km(5,2)=(1.0d0/24.0d0)*t13
    km(5,3)=t7
    km(5,4)=(1.0d0/18.0d0)*E*(-11*NU + 1)/t3
    km(5,5)=(13.0d0/45.0d0)*t2/t3
    km(5,6)=(17.0d0/72.0d0)*E/t4
    km(5,7)=(1.0d0/90.0d0)*t14
    km(5,8)=(1.0d0/18.0d0)*E*(7*NU-5)/t3
    km(5,9)=(1.0d0/180.0d0)*t12
    km(5,10)=(1.0d0/24.0d0)*t10/t3
    km(5,11)=-E*(10*NU-13)/t6
    km(5,12)=-E/(18*NU-18)
    km(5,13)=(23.0d0/180.0d0)*t2/t3
    km(5,14)=(7.0d0/72.0d0)*E/t4
    km(5,15)=t11
    km(5,16)=-E/(18*NU-18)
    km(6,1)=(1.0d0/24.0d0)*t10/t3
    km(6,2)=(1.0d0/180.0d0)*t12
    km(6,3)=(1.0d0/18.0d0)*E*(7*NU-5)/t3
    km(6,4)=(1.0d0/90.0d0)*t14
    km(6,5)=(17.0d0/72.0d0)*E/t4
    km(6,6)=(13.0d0/45.0d0)*t2/t3
    km(6,7)=-t8/t15
    km(6,8)=(1.0d0/45.0d0)*E*(-20*NU + 17)/t3
    km(6,9)=(1.0d0/24.0d0)*t13
    km(6,10)=(1.0d0/90.0d0)*t9
    km(6,11)=-E/(18*NU-18)
    km(6,12)=(1.0d0/90.0d0)*E*(-3*NU + 43)/t3
    km(6,13)=(7.0d0/72.0d0)*E/t4
    km(6,14)=(23.0d0/180.0d0)*t2/t3
    km(6,15)=-E/(18*NU-18)
    km(6,16)=(1.0d0/45.0d0)*E*(-10*NU + 13)/t3
    km(7,1)=t11
    km(7,2)=(1.0d0/18.0d0)*E/t4
    km(7,3)=0.0d0
    km(7,4)=(2.0d0/9.0d0)*E/t4
    km(7,5)=(1.0d0/90.0d0)*t14
    km(7,6)=-t8/t15
    km(7,7)=(4.0d0/45.0d0)*E*(3*NU-23)/t3
    km(7,8)=0.0d0
    km(7,9)=(1.0d0/90.0d0)*t14
    km(7,10)=(1.0d0/18.0d0)*t8/t3
    km(7,11)=0.0d0
    km(7,12)=-2*E/(9*NU-9)
    km(7,13)=t11
    km(7,14)=-E/(18*NU-18)
    km(7,15)=-4*E*(3*NU + 7)/t6
    km(7,16)=0.0d0
    km(8,1)=(1.0d0/18.0d0)*E/t4
    km(8,2)=(1.0d0/45.0d0)*E*(-10*NU + 13)/t3
    km(8,3)=(2.0d0/9.0d0)*E/t4
    km(8,4)=0.0d0
    km(8,5)=(1.0d0/18.0d0)*E*(7*NU-5)/t3
    km(8,6)=(1.0d0/45.0d0)*E*(-20*NU + 17)/t3
    km(8,7)=0.0d0
    km(8,8)=(8.0d0/45.0d0)*E*(5*NU-8)/t3
    km(8,9)=(1.0d0/18.0d0)*E*(-7*NU + 5)/t3
    km(8,10)=(1.0d0/45.0d0)*E*(-20*NU + 17)/t3
    km(8,11)=-2*E/(9*NU-9)
    km(8,12)=0.0d0
    km(8,13)=-E/(18*NU-18)
    km(8,14)=(1.0d0/45.0d0)*E*(-10*NU + 13)/t3
    km(8,15)=0.0d0
    km(8,16)=(4.0d0/45.0d0)*E*(5*NU + 1)/t3
    km(9,1)=(23.0d0/180.0d0)*t2/t3
    km(9,2)=-7*E/(t5)
    km(9,3)=-E*(10*NU-13)/t6
    km(9,4)=(1.0d0/18.0d0)*E/t4
    km(9,5)=(1.0d0/180.0d0)*t12
    km(9,6)=(1.0d0/24.0d0)*t13
    km(9,7)=(1.0d0/90.0d0)*t14
    km(9,8)=(1.0d0/18.0d0)*E*(-7*NU + 5)/t3
    km(9,9)=(13.0d0/45.0d0)*t2/t3
    km(9,10)=-17*E/(t5)
    km(9,11)=t7
    km(9,12)=(1.0d0/18.0d0)*t8/t3
    km(9,13)=(1.0d0/90.0d0)*t9
    km(9,14)=(1.0d0/24.0d0)*t10/t3
    km(9,15)=t11
    km(9,16)=(1.0d0/18.0d0)*E/t4
    km(10,1)=-7*E/(t5)
    km(10,2)=(23.0d0/180.0d0)*t2/t3
    km(10,3)=(1.0d0/18.0d0)*E/t4
    km(10,4)=(1.0d0/90.0d0)*E*(-3*NU + 43)/t3
    km(10,5)=(1.0d0/24.0d0)*t10/t3
    km(10,6)=(1.0d0/90.0d0)*t9
    km(10,7)=(1.0d0/18.0d0)*t8/t3
    km(10,8)=(1.0d0/45.0d0)*E*(-20*NU + 17)/t3
    km(10,9)=-17*E/(t5)
    km(10,10)=(13.0d0/45.0d0)*t2/t3
    km(10,11)=-E*(7*NU-5)/t15
    km(10,12)=(1.0d0/90.0d0)*t14
    km(10,13)=(1.0d0/24.0d0)*t13
    km(10,14)=(1.0d0/180.0d0)*t12
    km(10,15)=(1.0d0/18.0d0)*E/t4
    km(10,16)=(1.0d0/45.0d0)*E*(-10*NU + 13)/t3
    km(11,1)=-E*(10*NU-13)/t6
    km(11,2)=(1.0d0/18.0d0)*E/t4
    km(11,3)=(4.0d0/45.0d0)*E*(5*NU + 1)/t3
    km(11,4)=0.0d0
    km(11,5)=-E*(10*NU-13)/t6
    km(11,6)=-E/(18*NU-18)
    km(11,7)=0.0d0
    km(11,8)=-2*E/(9*NU-9)
    km(11,9)=t7
    km(11,10)=-E*(7*NU-5)/t15
    km(11,11)=(8.0d0/45.0d0)*E*(5*NU-8)/t3
    km(11,12)=0.0d0
    km(11,13)=t7
    km(11,14)=(1.0d0/18.0d0)*E*(7*NU-5)/t3
    km(11,15)=0.0d0
    km(11,16)=(2.0d0/9.0d0)*E/t4
    km(12,1)=(1.0d0/18.0d0)*E/t4
    km(12,2)=(1.0d0/90.0d0)*E*(-3*NU + 43)/t3
    km(12,3)=0.0d0
    km(12,4)=-4*E*(3*NU + 7)/t6
    km(12,5)=-E/(18*NU-18)
    km(12,6)=(1.0d0/90.0d0)*E*(-3*NU + 43)/t3
    km(12,7)=-2*E/(9*NU-9)
    km(12,8)=0.0d0
    km(12,9)=(1.0d0/18.0d0)*t8/t3
    km(12,10)=(1.0d0/90.0d0)*t14
    km(12,11)=0.0d0
    km(12,12)=(4.0d0/45.0d0)*E*(3*NU-23)/t3
    km(12,13)=(1.0d0/18.0d0)*E*(-11*NU + 1)/t3
    km(12,14)=(1.0d0/90.0d0)*t14
    km(12,15)=(2.0d0/9.0d0)*E/t4
    km(12,16)=0.0d0
    km(13,1)=(1.0d0/180.0d0)*t12
    km(13,2)=(1.0d0/24.0d0)*t10/t3
    km(13,3)=-E*(10*NU-13)/t6
    km(13,4)=-E/(18*NU-18)
    km(13,5)=(23.0d0/180.0d0)*t2/t3
    km(13,6)=(7.0d0/72.0d0)*E/t4
    km(13,7)=t11
    km(13,8)=-E/(18*NU-18)
    km(13,9)=(1.0d0/90.0d0)*t9
    km(13,10)=(1.0d0/24.0d0)*t13
    km(13,11)=t7
    km(13,12)=(1.0d0/18.0d0)*E*(-11*NU + 1)/t3
    km(13,13)=(13.0d0/45.0d0)*t2/t3
    km(13,14)=(17.0d0/72.0d0)*E/t4
    km(13,15)=(1.0d0/90.0d0)*t14
    km(13,16)=(1.0d0/18.0d0)*E*(7*NU-5)/t3
    km(14,1)=(1.0d0/24.0d0)*t13
    km(14,2)=(1.0d0/90.0d0)*t9
    km(14,3)=-E/(18*NU-18)
    km(14,4)=(1.0d0/90.0d0)*E*(-3*NU + 43)/t3
    km(14,5)=(7.0d0/72.0d0)*E/t4
    km(14,6)=(23.0d0/180.0d0)*t2/t3
    km(14,7)=-E/(18*NU-18)
    km(14,8)=(1.0d0/45.0d0)*E*(-10*NU + 13)/t3
    km(14,9)=(1.0d0/24.0d0)*t10/t3
    km(14,10)=(1.0d0/180.0d0)*t12
    km(14,11)=(1.0d0/18.0d0)*E*(7*NU-5)/t3
    km(14,12)=(1.0d0/90.0d0)*t14
    km(14,13)=(17.0d0/72.0d0)*E/t4
    km(14,14)=(13.0d0/45.0d0)*t2/t3
    km(14,15)=-t8/t15
    km(14,16)=(1.0d0/45.0d0)*E*(-20*NU + 17)/t3
    km(15,1)=(1.0d0/90.0d0)*t14
    km(15,2)=(1.0d0/18.0d0)*t8/t3
    km(15,3)=0.0d0
    km(15,4)=-2*E/(9*NU-9)
    km(15,5)=t11
    km(15,6)=-E/(18*NU-18)
    km(15,7)=-4*E*(3*NU + 7)/t6
    km(15,8)=0.0d0
    km(15,9)=t11
    km(15,10)=(1.0d0/18.0d0)*E/t4
    km(15,11)=0.0d0
    km(15,12)=(2.0d0/9.0d0)*E/t4
    km(15,13)=(1.0d0/90.0d0)*t14
    km(15,14)=-t8/t15
    km(15,15)=(4.0d0/45.0d0)*E*(3*NU-23)/t3
    km(15,16)=0.0d0
    km(16,1)=(1.0d0/18.0d0)*E*(-7*NU + 5)/t3
    km(16,2)=(1.0d0/45.0d0)*E*(-20*NU + 17)/t3
    km(16,3)=-2*E/(9*NU-9)
    km(16,4)=0.0d0
    km(16,5)=-E/(18*NU-18)
    km(16,6)=(1.0d0/45.0d0)*E*(-10*NU + 13)/t3
    km(16,7)=0.0d0
    km(16,8)=(4.0d0/45.0d0)*E*(5*NU + 1)/t3
    km(16,9)=(1.0d0/18.0d0)*E/t4
    km(16,10)=(1.0d0/45.0d0)*E*(-10*NU + 13)/t3
    km(16,11)=(2.0d0/9.0d0)*E/t4
    km(16,12)=0.0d0
    km(16,13)=(1.0d0/18.0d0)*E*(7*NU-5)/t3
    km(16,14)=(1.0d0/45.0d0)*E*(-20*NU + 17)/t3
    km(16,15)=0.0d0
    km(16,16)=(8.0d0/45.0d0)*E*(5*NU-8)/t3

RETURN
end SUBROUTINE Q8_iso
 
SUBROUTINE spabac(kv,loads,kdiag,neq,ij)
!
! This subroutine performs Cholesky forward and back-substitution
! on a symmetric skyline global matrix.
!
 IMPLICIT NONE
 INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15),rik=selected_int_kind(12)
 REAL(iwp),INTENT(IN)::kv(ij)
 REAL(iwp),INTENT(IN OUT)::loads(0:neq)
 INTEGER(rik),INTENT(IN)::kdiag(neq),ij
 INTEGER(rik)::m,l,ki,i,n,j,it,k,neq
 REAL(iwp)::x
 n=UBOUND(kdiag,1)
 loads(1)=loads(1)/kv(1)
 DO i=2,n
   ki=kdiag(i)-i
   l=kdiag(i-1)-ki+1 
   x=loads(i)
   IF(l/=i)THEN
     m=i-1
     DO j=l,m 
       x=x-kv(ki+j)*loads(j)
     END DO
   END IF
   loads(i)=x/kv(ki+i)
 END DO
 DO it=2,n
   i=n+2-it
   ki=kdiag(i)-i
   x=loads(i)/kv(ki+i)
   loads(i)=x
   l=kdiag(i-1)-ki+1
   IF(l/=i)THEN
     m=i-1
     DO k=l,m
       loads(k)=loads(k)-x*kv(ki+k)
     END DO
   END IF
 END DO
 loads(1)=loads(1)/kv(1)
RETURN
END SUBROUTINE spabac     

SUBROUTINE spabac_gauss(kv,loads,kdiag,neq,ij)
!
! This subroutine performs Gaussian forward and back-substitution on a
! skyline matrix.
!
 IMPLICIT NONE
 INTEGER::i,j,l,n,ii,jj,l1,l2,neq,ij
 INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15)
 REAL(iwp),INTENT(IN)::kv(ij)
 REAL(iwp),INTENT(IN OUT)::loads(0:neq)
 INTEGER,INTENT(IN)::kdiag(neq)
 REAL(iwp)::num,den,fac,asum,zero=0.0_iwp

 n=UBOUND(kdiag,1)
 DO j=1,n-1
   den=kv(kdiag(j))
   ii=0
   DO i=j+1,n
     ii=ii+1
     l=kdiag(i)-ii
     IF(l-kdiag(i-1)>zero)THEN
       num=kv(l)
       fac=num/den
       loads(i)=loads(i)-fac*loads(j)
     END IF
   END DO
 END DO
 loads(n)=loads(n)/kv(kdiag(n))
 DO i=n-1,1,-1
   jj=0
   asum=zero
   DO j=i+1,n
     jj=jj+1
     l1=kdiag(i+jj)-jj
     l2=kdiag(i+jj-1)
     IF(l1-l2>zero)asum=asum+kv(l1)*loads(j)
   END DO
   loads(i)=(loads(i)-asum)/kv(kdiag(i))
 END DO
RETURN
END SUBROUTINE spabac_gauss  
! 
SUBROUTINE sparin(kv,kdiag,neq,ij) 
!
! This subroutine performs Cholesky factorisation on a symmetric
! skyline global matrix.
!
 IMPLICIT NONE 
 INTEGER,PARAMETER::iwp=SELECTED_REAL_KIND(15),rik=selected_int_kind(12)
 INTEGER(rik)::n,i,ki,l,kj,j,ll,m,k,ij,neq
 REAL(iwp),INTENT(IN OUT)::kv(ij)
 INTEGER(rik),INTENT(IN)::kdiag(neq)
 REAL(iwp)::x
 n=UBOUND(kdiag,1)  
 kv(1)=SQRT(kv(1))
 DO i=2,n
   ki=kdiag(i)-i
   l=kdiag(i-1)-ki+1
   DO j=l,i
     x=kv(ki+j)
     kj=kdiag(j)-j
     IF(j/=1)THEN
       ll=kdiag(j-1)-kj+1
       ll=max(l,ll)
       IF(ll/=j)THEN
         m=j-1
         DO k=ll,m 
           x=x-kv(ki+k)*kv(kj+k) 
         END DO
       END IF
     END IF
     kv(ki+j)=x/kv(kj+j)
   END DO
   if (x .lt. 0.d0) then! put in for error checking
    kv(ki+i)= 1.d-6
   else
    kv(ki+i)=SQRT(x)
   endif
 END DO
RETURN
END SUBROUTINE sparin

SUBROUTINE matid_end(it,x,n,nels)
!
! This subroutine outputs a set of files in the Ensight gold format.
! Models in this format can be viewed in the visualisation tool ParaView.
!
! Element types supported:                Tested with:
! 4-node quadrilateral                    p115 (4th edition)
! Fri 02 Dec 2016 14:30:03 SAST modified etype to x changed variable type

  IMPLICIT none
  INTEGER                       :: i,nels,nod,j
  INTEGER,PARAMETER             :: iwp=SELECTED_REAL_KIND(15)
  REAL(iwp), INTENT(IN)         :: x(n)
  REAL(iwp)                     :: y(n)
  INTEGER, INTENT(IN)           :: it,n
  character*25                  :: filename
!------------------------------------------------------------------------------
! 4. Write file containing material IDs
!------------------------------------------------------------------------------
  REWIND(102)
  READ(102)nels,nod
  write(filename,'("TopOpt.ensi.matid-",I3.3)')it
  j =200+it
  OPEN(unit=j,FILE=filename)
  WRITE(j,'(A)') "Alya Ensight Gold --- Scalar per-element variable file"
  WRITE(j,'(A/A)') "part", "      1"
  if (nod==4) then
  WRITE(j,'(A)') "quad4"
  else
  WRITE(j,'(A)') "quad8"
  endif
  DO i=1,nels;
  y(i) = x(i)/(2.d0*dacos(0.d0))*180
  do while (y(i) .GE. 180)
  y(i) = y(i) - 180
  enddo
  do while (y(i) .LE.-180)
  y(i) = y(i) + 180
  enddo
  WRITE(j,'(E10.2)') (y(i))
  END DO

  WRITE(j,'(A)')

  CLOSE(j)

  !------------------------------------------------------------------------------
! 7. Write Material Angle as a vector
!------------------------------------------------------------------------------
  WRITE(filename,'("TopOpt.ensi.matang-",I3.3)')it
  j =300+it
  OPEN(j,FILE=filename)
  WRITE(j,'(A)')     "Alya Ensight Gold --- Vector per-element variable file"
  WRITE(j,'(A/A/A)') "part", "      1"
    if (nod==4) then
  WRITE(j,'(A)') "quad4"
  else
  WRITE(j,'(A)') "quad8"
  endif
  DO i=1,nels;
    WRITE(j,'(E10.2)') (1.d0)
  enddo
  DO i=1,nels;
    WRITE(j,'(E10.2)') (dtan(x(i)))
  enddo
  WRITE(j,'(A)')
  CLOSE(j)
  RETURN
END SUBROUTINE matid_end

SUBROUTINE mesh_case(nstep)
!
  IMPLICIT none
  INTEGER                       :: i,j,k,l,m,n,npri
  INTEGER                       :: prnwidth,remainder
  INTEGER,   INTENT(IN)         :: nstep
  REAL                          :: dtim

  OPEN(32,position="append")

  dtim = 1.d0
  npri = 1

  WRITE(32,'(A/A)')     "TIME","time set:     1"
  WRITE(32,'(A,I5)')    "number of steps:",nstep/npri
  WRITE(32,'(A,I5)')    "filename start number:",npri-1
  WRITE(32,'(A,I5)')    "filename increment:",npri
  WRITE(32,'(A)')       "time values:"
  prnwidth  = 5
  remainder = mod(nstep/npri,prnwidth)
  n         = ((nstep/npri) - remainder)/prnwidth
  IF(nstep/npri<=prnwidth) THEN
    DO i=1,nstep,npri
      IF(i==nstep) THEN
        WRITE(32,'(E12.5)') i*dtim
      ELSE
        WRITE(32,'(E12.5)',ADVANCE='no') i*dtim
      END IF
    END DO
  ELSE
    IF(remainder==0) THEN
      DO j=1,n
        m = ((j-1)*prnwidth)+1
        l = ((j-1)*prnwidth)+prnwidth
        WRITE(32,'(5E12.5)') (k*dtim,k=m,l)
      END DO
    ELSE
!     DO j=1,n-1
      DO j=1,n
        m = ((j-1)*prnwidth)+1
        l = ((j-1)*prnwidth)+prnwidth
        WRITE(32,'(5E12.5)') (k*dtim,k=m,l)
      END DO
      m = (n*prnwidth)+1
      l = (n*prnwidth)+remainder
      DO i=m,l
        IF(i==l) THEN
          WRITE(32,'(E12.5)') dtim*i
        ELSE
          WRITE(32,'(E12.5)',ADVANCE='no') dtim*i
        END IF
      END DO
    END IF
  END IF

  CLOSE(32)

END SUBROUTINE mesh_case
